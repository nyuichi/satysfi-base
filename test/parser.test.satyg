@require: test/test
@require: test/expect

@import: ../src/result
@import: ../src/parser

let parser-test-cases = open Test in
  let is-ok-with eq a r =
    Result.is-ok r
    && Eq.equal eq a (Result.unwrap r) in
  describe `Parser module` [
    it `parse many a` (fun () -> (
        open Parser in
        `aaa` |> StringParser.run (
            many (StringParser.char (Char.make `a`)))
        |> is-ok-with (List.eq Char.eq) [Char.make `a`; Char.make `a`; Char.make `a`]
        |> Expect.is-true
    ));
    it `parse arithmetic expresisons` (fun () -> (
        open Parser in
        open StringParser in
        let op name f = string name >> ret f in
        let addop = op `+` Int.add in
        let subop = op `-` Int.sub in
        let mulop = op `*` Int.mul in
        let divop = op `/` Int.div in
        let number = some digit >>= (fun cs -> ret (Int.of-string (String.of-list cs))) in
        let expr = fix (fun expr -> (
            let factor = between (string `(`) (string `)`) expr <|> number in
            let term = factor |> some-chain-left (mulop <|> divop) in
            let expr = term |> some-chain-left (addop <|> subop) in
            expr
        ))
        in
        (`12/2/2` |> run expr
          |> is-ok-with Int.eq 3)
        && (`1+2*4-12/2/2+4` |> run expr
          |> is-ok-with Int.eq 10)
        |> Expect.is-true
    ));
    it `parse with alt` (fun () -> (
        open Parser in
        open StringParser in
        let p =
                (label `expected 'foo'` (string `foo`))
            <|> (string `bar`)
        in
        (`bar` |> run p
          |> is-ok-with String.eq `bar`)
        |> Expect.is-true
    ))
  ]
