@require: stdjareport
@require: list
@import: ../../src/base
@import: ../../src/base0
@import: ../../src/base1
@import: ../../src/ref
@import: ../../src/string
@import: ../../src/debug
@import: ../../src/array
@import: ../../src/regexp
@import: ../../src/list-ext
@import: ../../src/option-ext
@import: ../../src/typeset/code2
@import: ../../src/parser
@import: ../../src/int
@import: ../../src/map
@import: ../../src/color-ext
@import: ../../src/promise
@import: ../../src/fn
@import: ../../src/float
@import: ../../src/length
@import: ../../src/set
@import: ../../src/tuple
@import: ../../src/graphics
@import: ../../src/path
@import: ../../src/typeset/math-ext
@import: ../../src/result
@import: ../../src/void
@import: ../../src/ord
@import: ../../src/eq
@import: ../../src/either
@import: ../../src/stream
@import: ../../src/pager
@import: ../../src/cross-ref
@import: ../../src/bool
@import: ../../src/tree-set
@import: ../../src/tree-map
@import: ../../src/big-int

let () = Debug.log `==== TreeMap ====` in
let m = TreeMap.of-list String.ord [(`apple`, 1); (`orange`, 3); (`pear`, 2)] in
let () = Debug.log (String.of-int (m |> TreeMap.get String.ord `orange` |> Option.unwrap)) in
let () = Debug.log (String.of-int (m |> TreeMap.get String.ord `pear` |> Option.unwrap)) in
let m = m |> TreeMap.insert String.ord `pear` 4 in
let () = Debug.log (String.of-int (m |> TreeMap.get String.ord `orange` |> Option.unwrap)) in
let () = Debug.log (String.of-int (m |> TreeMap.get String.ord `pear` |> Option.unwrap)) in

let () = Debug.log `==== BigInt ====` in
let p t = t |> BigInt.to-string |> Debug.log in
let () = p (BigInt.of-string `42`) in
let () = p (BigInt.of-string `-123`) in
let () = p (BigInt.of-string `-10`) in
let () = p BigInt.zero in
let () = p BigInt.one in
let () = p BigInt.minus-one in

let () = BigInt.((BigInt.of-string `42`) < (BigInt.of-string `136`)) |> Bool.to-string |> Debug.log in
let () = BigInt.((BigInt.of-string `42`) <= (BigInt.of-string `136`)) |> Bool.to-string |> Debug.log in
let () = BigInt.((BigInt.of-string `42`) > (BigInt.of-string `136`)) |> Bool.to-string |> Debug.log in
let () = BigInt.((BigInt.of-string `42`) >= (BigInt.of-string `136`)) |> Bool.to-string |> Debug.log in
let () = BigInt.((BigInt.of-string `42`) == (BigInt.of-string `136`)) |> Bool.to-string |> Debug.log in
let () = BigInt.((BigInt.of-string `-42`) < (BigInt.of-string `-136`)) |> Bool.to-string |> Debug.log in

let ord-to-string o = match o with | Lt -> `Lt` | Gt -> `Gt` | Eq -> `Eq` in
let p-ord n m =
  Ord.compare BigInt.ord n m
  |> ord-to-string
  |> Debug.log
in 
let () = p-ord (BigInt.of-string `123`) (BigInt.of-string `-456`) in
let () = p-ord (BigInt.of-string `-123`) (BigInt.of-string `456`) in
let () = p-ord (BigInt.of-string `333`) (BigInt.of-string `333`) in
let () = p-ord (BigInt.of-string `-333`) (BigInt.of-string `-333`) in
let () = p-ord (BigInt.of-string `1234`) (BigInt.of-string `432`) in
let () = p-ord (BigInt.of-string `432`) (BigInt.of-string `1234`) in
let () = p-ord (BigInt.of-string `-1234`) (BigInt.of-string `-432`) in
let () = p-ord (BigInt.of-string `-432`) (BigInt.of-string `-1234`) in
let () = p-ord (BigInt.of-string `332`) (BigInt.of-string `333`) in
let () = p-ord (BigInt.of-string `333`) (BigInt.of-string `332`) in
let () = p-ord (BigInt.of-string `-332`) (BigInt.of-string `-333`) in
let () = p-ord (BigInt.of-string `-333`) (BigInt.of-string `-332`) in



let () = p (BigInt.add (BigInt.of-string `42`) (BigInt.of-string `39`)) in
let () = p (BigInt.add (BigInt.of-string `42`) (BigInt.of-string `-39`)) in
let () = p (BigInt.add (BigInt.of-string `-42`) (BigInt.of-string `39`)) in
let () = p (BigInt.add (BigInt.of-string `-42`) (BigInt.of-string `-39`)) in
let () = p (BigInt.add (BigInt.of-string `42`) (BigInt.of-string `45`)) in
let () = p (BigInt.add (BigInt.of-string `42`) (BigInt.of-string `-45`)) in
let () = p (BigInt.add (BigInt.of-string `-42`) (BigInt.of-string `45`)) in
let () = p (BigInt.add (BigInt.of-string `-42`) (BigInt.of-string `-45`)) in

let () = p (BigInt.sub (BigInt.of-string `42`) (BigInt.of-string `39`)) in
let () = p (BigInt.sub (BigInt.of-string `42`) (BigInt.of-string `-39`)) in
let () = p (BigInt.sub (BigInt.of-string `-42`) (BigInt.of-string `39`)) in
let () = p (BigInt.sub (BigInt.of-string `-42`) (BigInt.of-string `-39`)) in
let () = p (BigInt.sub (BigInt.of-string `42`) (BigInt.of-string `45`)) in
let () = p (BigInt.sub (BigInt.of-string `42`) (BigInt.of-string `-45`)) in
let () = p (BigInt.sub (BigInt.of-string `-42`) (BigInt.of-string `45`)) in
let () = p (BigInt.sub (BigInt.of-string `-42`) (BigInt.of-string `-45`)) in

let () = p (BigInt.mul (BigInt.of-string `157`) (BigInt.of-string `16`)) in
let () = p (BigInt.mul (BigInt.of-string `157`) (BigInt.of-string `-16`)) in
let () = p (BigInt.mul (BigInt.of-string `-157`) (BigInt.of-string `16`)) in
let () = p (BigInt.mul (BigInt.of-string `-157`) (BigInt.of-string `-16`)) in

let () = p (BigInt.div (BigInt.of-string `12345`) (BigInt.of-string `43`)) in
let () = p (BigInt.mod- (BigInt.of-string `12345`) (BigInt.of-string `43`)) in
let () = p (BigInt.div (BigInt.of-string `1111111`) (BigInt.of-string `4649`)) in
let () = p (BigInt.mod- (BigInt.of-string `1111111`) (BigInt.of-string `4649`)) in
let () = p (BigInt.div (BigInt.of-string `-12345`) (BigInt.of-string `43`)) in
let () = p (BigInt.mod- (BigInt.of-string `-12345`) (BigInt.of-string `43`)) in
let () = p (BigInt.div (BigInt.of-string `12345`) (BigInt.of-string `-43`)) in
let () = p (BigInt.mod- (BigInt.of-string `12345`) (BigInt.of-string `-43`)) in
let () = p (BigInt.div (BigInt.of-string `-12345`) (BigInt.of-string `-43`)) in
let () = p (BigInt.mod- (BigInt.of-string `-12345`) (BigInt.of-string `-43`)) in
let () = p (BigInt.of-string `2` |> BigInt.pow (BigInt.of-string `3`)) in
let () = p (BigInt.of-string `2` |> BigInt.pow (BigInt.of-string `0`)) in


let () = p (BigInt.of-int 12345) in
let () = p (BigInt.of-int (-12345)) in
let () = Debug.log (Int.to-string(BigInt.to-int (BigInt.of-int 12345))) in
let () = Debug.log (Int.to-string(BigInt.to-int (BigInt.of-int (-12345)))) in


finish
