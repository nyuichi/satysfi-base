@require: stdjareport
@require: list
@import: ../../src/base
@import: ../../src/base0
@import: ../../src/base1
@import: ../../src/ref
@import: ../../src/string
@import: ../../src/debug
@import: ../../src/array
@import: ../../src/regexp
@import: ../../src/list-ext
@import: ../../src/option-ext
@import: ../../src/typeset/code2
@import: ../../src/parser
@import: ../../src/int
@import: ../../src/map
@import: ../../src/color-ext
@import: ../../src/promise
@import: ../../src/fn
@import: ../../src/float
@import: ../../src/length
@import: ../../src/set
@import: ../../src/tuple
@import: ../../src/graphics
@import: ../../src/path
@import: ../../src/typeset/math-ext
@import: ../../src/result
@import: ../../src/void
@import: ../../src/ord
@import: ../../src/eq
@import: ../../src/either
@import: ../../src/stream
@import: ../../src/pager
@import: ../../src/cross-ref
@import: ../../src/bool
@import: ../../src/tree-set
@import: ../../src/tree-map
@import: ../../src/big-int

let () = Debug.log `==== Bool ====` in
let p b = b |> Bool.to-string |> Debug.log in
let p-opt o =
  let s =
    match o with
    | None -> `None`
    | Some(i) -> `Some(` ^ Bool.to-string i ^ `)`
  in
  Debug.log s
in
let () = p Bool.max-value in
let () = p Bool.min-value in
let () = p-opt(0 |> Bool.of-int-opt) in
let () = p-opt(1 |> Bool.of-int-opt) in
let () = p-opt(2 |> Bool.of-int-opt) in
let () = p-opt(`false` |> Bool.of-string-opt) in
let () = p-opt(`true` |> Bool.of-string-opt) in
let () = p-opt(`hoge` |> Bool.of-string-opt) in

let () = Debug.log `==== Stream ====` in
let () = Stream.fib |> Stream.take 30 |> Stream.to-list |> List.iter (fun x -> Debug.log <| String.of-int x) in
let () = Stream.nat |> Stream.take 5 |> Stream.to-list |> List.iter (fun x -> Debug.log <| String.of-int x)
in

let () = Debug.log `==== Fn ====` in
let () = 0 |> Fn.fix (fun loop n -> (
  if n >= 10 then
    Debug.log `done`
  else
    Debug.log (String.of-int n) before
    loop (n + 1)
))
in

let () = Debug.log `==== TreeSet ====` in
% REMARK:
% This test relies on the fact that the order of elements of a result from TreeSet.to-list is
% level-order (BFS). If the implementation is changed, the following tests have to be updated.
let p s = s |> TreeSet.to-list |> List.map String.of-int |> List.intersperse `,` |> (fun l -> String.concat l) |> Debug.log in
let s = TreeSet.empty in
let () = p s in
let s = TreeSet.of-list Int.ord [3;2;3;1] in
let () = p s in
let () = Debug.log `check rotations:` in
% right left rotation
let s = [1;3;2] |> List.fold-left (fun s x -> TreeSet.insert Int.ord x s) TreeSet.empty in
let () = p s in
% right left rotation
let s = [3;1;2] |> List.fold-left (fun s x -> TreeSet.insert Int.ord x s) TreeSet.empty in
let () = p s in
% left rotation
let s = [3;2;1] |> List.fold-left (fun s x -> TreeSet.insert Int.ord x s) TreeSet.empty in
let () = p s in
% right rotation
let s = [1;2;3] |> List.fold-left (fun s x -> TreeSet.insert Int.ord x s) TreeSet.empty in
let () = p s in
%     16
%  8      24
% 4 12  20  28
let s = [16;8;24;4;12;20;28] |> List.fold-left (fun s x -> TreeSet.insert Int.ord x s) TreeSet.empty in
let () = p s in
% right rotation
let t = [3;2;1;0;-1] |> List.fold-left (fun s x -> TreeSet.insert Int.ord x s) s in
let () = p t in
% left rotation
let t = [29;30;31;32;33] |> List.fold-left (fun s x -> TreeSet.insert Int.ord x s) s in
let () = p t in
% right left rotation
let t = [9;15;10;11] |> List.fold-left (fun s x -> TreeSet.insert Int.ord x s) s in
let () = p t in
% left right rotation
let t = [23;17;22;19] |> List.fold-left (fun s x -> TreeSet.insert Int.ord x s) s in
let () = p t in
let () = Debug.log `check size after insertion:` in
let () = TreeSet.size TreeSet.empty |> String.of-int |> Debug.log in
let () = TreeSet.size s |> String.of-int |> Debug.log in
let t = s |> TreeSet.insert Int.ord 16 in
let () = TreeSet.size t |> String.of-int |> Debug.log in
let t = s |> TreeSet.insert Int.ord 24 in
let () = TreeSet.size t |> String.of-int |> Debug.log in
let t = s |> TreeSet.insert Int.ord 20 in
let () = TreeSet.size t |> String.of-int |> Debug.log in
let () = Debug.log `check remove:` in
let t = TreeSet.remove Int.ord 16 s in
let () = p t in
let t = TreeSet.remove Int.ord 28 t in
let () = p t in
let t = TreeSet.remove Int.ord 24 t in
let () = p t in
let () = TreeSet.size t |> String.of-int |> Debug.log in
let t = TreeSet.remove Int.ord 10 t in
let () = p t in
let () = TreeSet.size t |> String.of-int |> Debug.log in
% See https://github.com/nyuichi/satysfi-base/pull/140#discussion_r550355160
let t = [9;4;11;2;6;10;13;1;3;5;8;12;0;7] |> List.fold-left (fun s x -> TreeSet.insert Int.ord x s) TreeSet.empty in
let t = TreeSet.remove Int.ord 13 t in
let () = p t in
let () = Debug.log `check get:` in
let () = s |> TreeSet.get Int.ord 20 |> Option.unwrap-or (-1) |> String.of-int |> Debug.log in
let () = s |> TreeSet.get Int.ord 23 |> Option.unwrap-or (-1) |> String.of-int |> Debug.log in

let () = Debug.log `==== TreeMap ====` in
let m = TreeMap.of-list String.ord [(`apple`, 1); (`orange`, 3); (`pear`, 2)] in
let () = Debug.log (String.of-int (m |> TreeMap.get String.ord `orange` |> Option.unwrap)) in
let () = Debug.log (String.of-int (m |> TreeMap.get String.ord `pear` |> Option.unwrap)) in
let m = m |> TreeMap.insert String.ord `pear` 4 in
let () = Debug.log (String.of-int (m |> TreeMap.get String.ord `orange` |> Option.unwrap)) in
let () = Debug.log (String.of-int (m |> TreeMap.get String.ord `pear` |> Option.unwrap)) in

let () = Debug.log `==== BigInt ====` in
let p t = t |> BigInt.to-string |> Debug.log in
let () = p (BigInt.of-string `42`) in
let () = p (BigInt.of-string `-123`) in
let () = p (BigInt.of-string `-10`) in
let () = p BigInt.zero in
let () = p BigInt.one in
let () = p BigInt.minus-one in

let () = BigInt.((BigInt.of-string `42`) < (BigInt.of-string `136`)) |> Bool.to-string |> Debug.log in
let () = BigInt.((BigInt.of-string `42`) <= (BigInt.of-string `136`)) |> Bool.to-string |> Debug.log in
let () = BigInt.((BigInt.of-string `42`) > (BigInt.of-string `136`)) |> Bool.to-string |> Debug.log in
let () = BigInt.((BigInt.of-string `42`) >= (BigInt.of-string `136`)) |> Bool.to-string |> Debug.log in
let () = BigInt.((BigInt.of-string `42`) == (BigInt.of-string `136`)) |> Bool.to-string |> Debug.log in
let () = BigInt.((BigInt.of-string `-42`) < (BigInt.of-string `-136`)) |> Bool.to-string |> Debug.log in

let ord-to-string o = match o with | Lt -> `Lt` | Gt -> `Gt` | Eq -> `Eq` in
let p-ord n m =
  Ord.compare BigInt.ord n m
  |> ord-to-string
  |> Debug.log
in 
let () = p-ord (BigInt.of-string `123`) (BigInt.of-string `-456`) in
let () = p-ord (BigInt.of-string `-123`) (BigInt.of-string `456`) in
let () = p-ord (BigInt.of-string `333`) (BigInt.of-string `333`) in
let () = p-ord (BigInt.of-string `-333`) (BigInt.of-string `-333`) in
let () = p-ord (BigInt.of-string `1234`) (BigInt.of-string `432`) in
let () = p-ord (BigInt.of-string `432`) (BigInt.of-string `1234`) in
let () = p-ord (BigInt.of-string `-1234`) (BigInt.of-string `-432`) in
let () = p-ord (BigInt.of-string `-432`) (BigInt.of-string `-1234`) in
let () = p-ord (BigInt.of-string `332`) (BigInt.of-string `333`) in
let () = p-ord (BigInt.of-string `333`) (BigInt.of-string `332`) in
let () = p-ord (BigInt.of-string `-332`) (BigInt.of-string `-333`) in
let () = p-ord (BigInt.of-string `-333`) (BigInt.of-string `-332`) in



let () = p (BigInt.add (BigInt.of-string `42`) (BigInt.of-string `39`)) in
let () = p (BigInt.add (BigInt.of-string `42`) (BigInt.of-string `-39`)) in
let () = p (BigInt.add (BigInt.of-string `-42`) (BigInt.of-string `39`)) in
let () = p (BigInt.add (BigInt.of-string `-42`) (BigInt.of-string `-39`)) in
let () = p (BigInt.add (BigInt.of-string `42`) (BigInt.of-string `45`)) in
let () = p (BigInt.add (BigInt.of-string `42`) (BigInt.of-string `-45`)) in
let () = p (BigInt.add (BigInt.of-string `-42`) (BigInt.of-string `45`)) in
let () = p (BigInt.add (BigInt.of-string `-42`) (BigInt.of-string `-45`)) in

let () = p (BigInt.sub (BigInt.of-string `42`) (BigInt.of-string `39`)) in
let () = p (BigInt.sub (BigInt.of-string `42`) (BigInt.of-string `-39`)) in
let () = p (BigInt.sub (BigInt.of-string `-42`) (BigInt.of-string `39`)) in
let () = p (BigInt.sub (BigInt.of-string `-42`) (BigInt.of-string `-39`)) in
let () = p (BigInt.sub (BigInt.of-string `42`) (BigInt.of-string `45`)) in
let () = p (BigInt.sub (BigInt.of-string `42`) (BigInt.of-string `-45`)) in
let () = p (BigInt.sub (BigInt.of-string `-42`) (BigInt.of-string `45`)) in
let () = p (BigInt.sub (BigInt.of-string `-42`) (BigInt.of-string `-45`)) in

let () = p (BigInt.mul (BigInt.of-string `157`) (BigInt.of-string `16`)) in
let () = p (BigInt.mul (BigInt.of-string `157`) (BigInt.of-string `-16`)) in
let () = p (BigInt.mul (BigInt.of-string `-157`) (BigInt.of-string `16`)) in
let () = p (BigInt.mul (BigInt.of-string `-157`) (BigInt.of-string `-16`)) in

let () = p (BigInt.div (BigInt.of-string `12345`) (BigInt.of-string `43`)) in
let () = p (BigInt.mod- (BigInt.of-string `12345`) (BigInt.of-string `43`)) in
let () = p (BigInt.div (BigInt.of-string `1111111`) (BigInt.of-string `4649`)) in
let () = p (BigInt.mod- (BigInt.of-string `1111111`) (BigInt.of-string `4649`)) in
let () = p (BigInt.div (BigInt.of-string `-12345`) (BigInt.of-string `43`)) in
let () = p (BigInt.mod- (BigInt.of-string `-12345`) (BigInt.of-string `43`)) in
let () = p (BigInt.div (BigInt.of-string `12345`) (BigInt.of-string `-43`)) in
let () = p (BigInt.mod- (BigInt.of-string `12345`) (BigInt.of-string `-43`)) in
let () = p (BigInt.div (BigInt.of-string `-12345`) (BigInt.of-string `-43`)) in
let () = p (BigInt.mod- (BigInt.of-string `-12345`) (BigInt.of-string `-43`)) in
let () = p (BigInt.of-string `2` |> BigInt.pow (BigInt.of-string `3`)) in
let () = p (BigInt.of-string `2` |> BigInt.pow (BigInt.of-string `0`)) in


let () = p (BigInt.of-int 12345) in
let () = p (BigInt.of-int (-12345)) in
let () = Debug.log (Int.to-string(BigInt.to-int (BigInt.of-int 12345))) in
let () = Debug.log (Int.to-string(BigInt.to-int (BigInt.of-int (-12345)))) in


finish
