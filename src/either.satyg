use open Util
use Fn

%% [either 'a 'b] contains a value of either ['a] or ['b].
%% Unlike [result 'a 'b], [either 'a 'b] should have
%% no bias between ['a] and ['b].

module Either :> sig
  type either 'a 'b =
    | Left of 'a
    | Right of 'b
  val persistent ~left 'a 'b : 'a -> either 'a 'b
  val persistent ~right 'a 'b : 'b -> either 'a 'b
  val persistent ~is-left 'a 'b : either 'a 'b -> bool
  val persistent ~is-right 'a 'b : either 'a 'b -> bool
  val persistent ~unwrap-left 'a 'b : either 'a 'b -> 'a
  val persistent ~unwrap-left-or 'a 'b : 'a -> either 'a 'b -> 'a
  val persistent ~unwrap-left-or-else 'a 'b : ('b -> 'a) -> either 'a 'b -> 'a
  val persistent ~unwrap-right 'a 'b : either 'a 'b -> 'b
  val persistent ~unwrap-right-or 'a 'b : 'b -> either 'a 'b -> 'b
  val persistent ~unwrap-right-or-else 'a 'b : ('a -> 'b) -> either 'a 'b -> 'b
  val persistent ~either 'a 'b 'c : ('a -> 'c) -> ('b -> 'c) -> either 'a 'b -> 'c
  val persistent ~bimap 'a 'b 'c 'd : ('a -> 'c) -> ('b -> 'd) -> either 'a 'b -> either 'c 'd
  val persistent ~swap 'a 'b : either 'a 'b -> either 'b 'a
  val persistent ~value 'a : either 'a 'a -> 'a
end = struct
  type either 'a 'b =
    | Left of 'a
    | Right of 'b

  val persistent ~left x = Left(x)

  val persistent ~right y = Right(y)

  val persistent ~is-left e =
    match e with
    | Left(_) -> true
    | Right(_) -> false
    end

  val persistent ~is-right e =
    match e with
    | Left(_) -> false
    | Right(_) -> true
    end

  val persistent ~unwrap-left-or-else f e =
    match e with
    | Left(x) -> x
    | Right(y) -> f y
    end

  val persistent ~unwrap-left-or x e =
    e |> unwrap-left-or-else (Fn.const x)

  val persistent ~unwrap-left e =
    e |> unwrap-left-or-else (fun _ ->
      panic `unwrap-left failed`
    )

  val persistent ~unwrap-right-or-else f e =
    match e with
    | Left(x) -> f x
    | Right(y) -> y
    end

  val persistent ~unwrap-right-or y e =
    e |> unwrap-right-or-else (Fn.const y)

  val persistent ~unwrap-right e =
    e |> unwrap-right-or-else (fun _ ->
      panic `unwrap-right failed`
    )

  val persistent ~either f g e =
    match e with
    | Left(x) -> f x
    | Right(y) -> g y
    end

  val persistent ~bimap f g e =
    match e with
    | Left(x) -> left (f x)
    | Right(y) -> right (g y)
    end

  val persistent ~swap e =
    match e with
    | Left(x) -> right x
    | Right(y) -> left y
    end

  val persistent ~value e =
    match e with
    | Left(x) -> x
    | Right(y) -> y
    end
end
