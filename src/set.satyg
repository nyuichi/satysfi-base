@import: base
@import: list-ext
@import: eq

% This module implements pre-set-like structure

module Set : sig
  type 'a t
  val empty : 'a t
  val singleton : 'a -> 'a t
  val size : 'a t -> int
  val is-empty : 'a t -> bool
  val choose : 'a t -> 'a option
  val mem : ('a Eq.t) implicit -> 'a -> 'a t -> bool
  val insert : 'a -> 'a t -> 'a t
  val remove : ('a Eq.t) implicit -> 'a -> 'a t -> 'a t
  val of-list : 'a list -> 'a t
  val to-list : ('a Eq.t) implicit -> 'a t -> 'a list
  val mem-opt : ('a Eq.t) implicit -> 'a -> 'a t -> 'a option
end = struct
  type 'a t = 'a list

  let empty = []

  let singleton v = [v]

  let size l = List.length l

  let is-empty l = List.null l

  let choose l = match l with
  | [] -> None
  | v :: _ -> Some(v)

  let mem eq v l = List.exists (Eq.equal eq v) l

  let insert v l = v :: l

  let remove eq v l = List.filter (Eq.inequal eq v) l

  let of-list l = l

  let to-list eq l =
    let-rec dedup l acc = match l with
    | [] -> List.reverse acc
    | x :: l when List.exists (Eq.equal eq x) acc -> dedup l acc
    | x :: l -> dedup l (x :: acc)
    in dedup [] l

  let mem-opt eq v l = List.find (Eq.equal eq v) l
end