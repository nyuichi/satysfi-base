@stage: persistent
@import: base
@require: list
@import: char
@import: ord
@import: eq

module String : sig
  val equal : string -> string -> bool
  val ord : (string Ord.t) implicit
  val eq : (string Eq.t) implicit
  val max : string -> string -> string
  val min : string -> string -> string
  val (<) : string -> string -> bool
  val (>) : string -> string -> bool
  val (>=) : string -> string -> bool
  val (<=) : string -> string -> bool
  val (==) : string -> string -> bool
  val length : string -> int
  val sub : int -> int -> string -> string
  val empty : string
  val of-bool : bool -> string
  val of-int : int -> string
  val of-float : float -> string
  val of-codepoints : int list -> string
  val of-char : Char.t -> string
  val of-length : length -> string
  val append : string -> string -> string
  val concat : string ?-> string list -> string
  val is-empty : string -> bool
  val starts-with : string -> string -> bool
  val ends-with : string -> string -> bool
  val to-list : string -> Char.t list
  val of-list : Char.t list -> string
  val pow : int -> string -> string
  val split : int -> string -> string * string
  val split-by-first : Char.t -> string -> string * string option
  val split-by : Char.t -> string -> string list
  val lines : string -> string list
  val index : Char.t -> string -> int option
  val make  : int -> Char.t -> string
  val init  : int -> (int -> Char.t) -> string
  val get   : int -> string -> Char.t option
  val contains : string -> string -> bool
  val trim       : string -> string
  val trim-start : string -> string
  val trim-end   : string -> string
  val uppercase-ascii    : string -> string
  val lowercase-ascii    : string -> string
  val capitalize-ascii   : string -> string
  val uncapitalize-ascii : string -> string
  % val byte-length : string -> int
  % val sub-bytes : int -> int -> string -> string
end = struct
  let equal = string-same
  let eq = Eq.make equal
  let length = string-length
  let sub i l s = string-sub s i l
  let of-bool b = if b then `true` else `false`
  let of-int = arabic
  let of-float = show-float
  let empty = ` `
  let of-codepoints = string-unexplode
  let of-char = Char.to-string
  let append s1 s2 = s1 ^ s2



  let concat ?:s xs =
    let s =
      match s with
      | None -> empty
      | Some(s) -> s
    in
    let-rec sub xs =
      match xs with
      | [] -> empty
      | [x] -> x
      | x :: xs -> x ^ s ^ sub xs
    in
    sub xs


  let is-empty s =
    equal s empty

  let starts-with p s =
    let s-len = length s in
    let p-len = length p in
    (s-len >= p-len) &&&- (fun () -> equal (s |> sub 0 p-len) p)

  let ends-with p s =
    let s-len = length s in
    let p-len = length p in
    (s-len >= p-len) &&&- (fun () -> equal (s |> sub (s-len - 1 - p-len) p-len) p)

  let to-list s =
    s
    |> string-explode
    |> List.map Char.of-codepoint

  let of-list chars =
    chars |> List.map Char.to-string |> (fun slst -> concat slst)

  let pow n s =
    let-rec go i acc = if i == n then acc else go (i + 1) (acc ^ s) in
    go 0 empty

  let split i s =
    (sub 0 i s, sub i (length s - i) s)

  let split-by-first d s =
    let-rec aux maxlen len =
      if len >= maxlen then
        (s, None)
      else if Char.equal (Char.at len s) d then
        (sub 0 len s, Some(sub (len + 1) (maxlen - len - 1) s))
      else
        aux maxlen (len + 1)
    in aux (length s) 0

  let-rec split-by d s =
    match split-by-first d s with
    | (head, Some(tail)) -> head :: split-by d tail
    | (head, None)       -> [head]

  let lines = split-by Char.newline


  let-rec make n c =
    if n <= 0 then
      empty
    else
      Char.to-string c ^ make (n - 1) c


  let init n f =
    let-rec sub m f =
      if m >= n then
        empty
      else
        Char.to-string (f m) ^ sub (m + 1) f
    in
    sub 0 f


  let get n str =
    str
    |> to-list
    |> List.nth n




  % Quick-Search
  % こちらを参考に実装：https://www.m3tech.blog/entry/2020/09/28/120000
  let contains s str =
    % 検索する語と検索される語が先頭から一致するかどうかを判定する
    % 一致しない場合は先頭の文字を渡す
    let-rec search-and-get-next-char is-eq clst slst =
      match (clst, slst) with
      | ([], []) -> (is-eq, None)
      | ([], s::_) -> (is-eq, Some(s))
      | (_, []) -> (false, None)
      | (c::cs, s::ss) -> (
        if Char.equal c s && is-eq then
          search-and-get-next-char true cs ss
        else
          search-and-get-next-char false cs ss
      )
    in

    % 検索される語の先頭の文字が、検索する語の中で何番目にあたるかを調べる
    % 検索される後の先頭の文字が、検索する語の中にない場合はNoneが返る
    let-rec find-next-char-pos n n-opt c clst =
      match clst with
      | x::xs -> (
        if Char.equal x c then
          find-next-char-pos (n + 1) (Some n) c xs
        else
          find-next-char-pos (n + 1) None c xs
      )
      | [] -> n-opt
    in

    let-rec shift n lst =
      if n <= 0 then
        lst
      else
        match lst with
        | [] -> []
        | _::xs -> shift (n - 1) xs
    in

    let clst = to-list s in
    let-rec sub l =
      match search-and-get-next-char true clst l with
      | (true, _) -> true
      | (false, None) -> false
      | (false, Some(c)) -> (
        let n-opt = find-next-char-pos 0 None c clst in
        let n =
          match n-opt with
          | Some(n) -> List.length clst - n
          | None -> List.length clst + 1
        in
        let new-l = shift n l in
        sub new-l
      )
    in
    sub (to-list str)


  let-rec space-len n clst =
    match clst with
    | c::xs -> (
      if Char.is-space c then
        space-len (n + 1) xs
      else
        n
    )
    | _ -> n

  let trim str =
    let len = length str in
    let lst = to-list str in
    let rev-lst = List.reverse lst in
    let start-space-len = space-len 0 lst in
    let end-space-len = space-len 0 rev-lst in
    let len = len - start-space-len - end-space-len in
    let len = if len < 0 then 0 else len in
    sub start-space-len len str

  let trim-start str =
    let len = length str in
    let lst = to-list str in
    let start-space-len = space-len 0 lst in
    let len = len - start-space-len in
    sub start-space-len len str

  let trim-end str =
    let len = length str in
    let lst = str |> to-list |> List.reverse in
    let start-space-len = space-len 0 lst in
    let len = len - start-space-len in
    sub 0 len str


  let uppercase-ascii str =
    str
    |> to-list
    |> List.map (fun c -> (
      let n = Char.to-codepoint c in
      if 0x61 <= n && n <= 0x7A then
        Char.of-codepoint (n - 0x20)
      else
        c
    ))
    |> of-list

  let lowercase-ascii str =
    str
    |> to-list
    |> List.map (fun c -> (
      let n = Char.to-codepoint c in
      if 0x41 <= n && n <= 0x5A then
        Char.of-codepoint (n + 0x20)
      else
        c
    ))
    |> of-list

  let capitalize-ascii str =
    str
    |> to-list
    |> List.mapi (fun i c -> (
      let n = Char.to-codepoint c in
      if i == 0 && 0x61 <= n && n <= 0x7A then
        Char.of-codepoint (n - 0x20)
      else
        c
    ))
    |> of-list

  let uncapitalize-ascii str =
    str
    |> to-list
    |> List.mapi (fun i c -> (
      let n = Char.to-codepoint c in
      if i == 0 && 0x41 <= n && n <= 0x5A then
        Char.of-codepoint (n + 0x20)
      else
        c
    ))
    |> of-list



  let index c s =
    let cs = to-list s in
    let-rec aux cs acc = match cs with
    | [] -> None
    | (x::xs) -> if Eq.equal Char.eq c x then Some(acc) else aux xs (acc + 1) in
    aux cs 0

  let of-length l =
    % -- the following are mostly copied from `ZL0.string-of-length` in `zrbase/zl0`
    let xs = show-float (l /' 1pt) in
    let pu = string-length xs - 1 in
    if string-same (string-sub xs pu 1) `.` then
      string-sub xs 0 pu ^ `pt`
    else xs ^ `pt`
    % -- end

  let ord =
    Ord.make (fun sl sr -> (
      let lstl = string-explode sl in
      let lstr = string-explode sr in
      let-rec sub lstl lstr =
          match (lstl, lstr) with
          | ([],[]) -> Eq
          | (_, []) -> Gt
          | ([],_) -> Lt
          | (nl::xl,nr::xr) -> (
              if nl < nr then
                  Lt
              else
                  if nl > nr then
                      Gt
                  else
                      sub xl xr
          )
      in
      sub lstl lstr
    ))
  let max = Ord.max ord
  let min = Ord.min ord
  let (<) = Ord.lt ord
  let (>) = Ord.gt ord
  let (>=) = Ord.ge ord
  let (<=) = Ord.le ord
  let (==) = Ord.eq ord



  % let byte-length = string-byte-length
  % let sub-bytes i j s = string-sub-bytes s i j
end
