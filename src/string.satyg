@stage: persistent
@import: base
@require: list
@import: char
@import: ord
@import: eq

module String : sig
  val equal : string -> string -> bool
  val ord : (string Ord.t) implicit
  val eq : (string Eq.t) implicit
  val max : string -> string -> string
  val min : string -> string -> string
  val (<) : string -> string -> bool
  val (>) : string -> string -> bool
  val (>=) : string -> string -> bool
  val (<=) : string -> string -> bool
  val (==) : string -> string -> bool
  val length : string -> int
  val sub : int -> int -> string -> string
  val empty : string
  val of-bool : bool -> string
  val of-int : int -> string
  val of-float : float -> string
  val of-codepoints : int list -> string
  val of-char : Char.t -> string
  val of-length : length -> string
  val append : string -> string -> string
  val concat : string list -> string
  val is-empty : string -> bool
  val starts-with : string -> string -> bool
  val ends-with : string -> string -> bool
  val to-list : string -> Char.t list
  val of-list : Char.t list -> string
  val pow : int -> string -> string
  val split : int -> string -> string * string
  val split-by-first : Char.t -> string -> string * string option
  val split-by : Char.t -> string -> string list
  val lines : string -> string list
  val index : Char.t -> string -> int option
  % val byte-length : string -> int
  % val sub-bytes : int -> int -> string -> string
end = struct
  let equal = string-same
  let eq = Eq.make equal
  let length = string-length
  let sub i l s = string-sub s i l
  let of-bool b = if b then `true` else `false`
  let of-int = arabic
  let of-float = show-float
  let empty = ` `
  let of-codepoints = string-unexplode
  let of-char = Char.to-string
  let append s1 s2 = s1 ^ s2

  let-rec concat xs = match xs with
  | [] -> empty
  | s :: xs -> s ^ concat xs

  let is-empty s =
    equal s empty

  let starts-with p s =
    let s-len = length s in
    let p-len = length p in
    (s-len >= p-len) &&&- (fun () -> equal (s |> sub 0 p-len) p)

  let ends-with p s =
    let s-len = length s in
    let p-len = length p in
    (s-len >= p-len) &&&- (fun () -> equal (s |> sub (s-len - 1 - p-len) p-len) p)

  let to-list s =
    let-rec go i acc = (match i with
    | 0 -> acc
    | _ -> go (i - 1) (Char.at (i - 1) s :: acc)) in
    go (length s) []

  let of-list chars =
    chars |> List.map Char.to-string |> concat

  let pow n s =
    let-rec go i acc = if i == n then acc else go (i + 1) (acc ^ s) in
    go 0 empty

  let split i s =
    (sub 0 i s, sub i (length s - i) s)

  let split-by-first d s =
    let-rec aux maxlen len =
      if len >= maxlen then
        (s, None)
      else if Char.equal (Char.at len s) d then
        (sub 0 len s, Some(sub (len + 1) (maxlen - len - 1) s))
      else
        aux maxlen (len + 1)
    in aux (length s) 0

  let-rec split-by d s =
    match split-by-first d s with
    | (head, Some(tail)) -> head :: split-by d tail
    | (head, None)       -> [head]

  let lines = split-by Char.newline

  let index c s =
    let cs = to-list s in
    let-rec aux cs acc = match cs with
    | [] -> None
    | (x::xs) -> if Eq.equal Char.eq c x then Some(acc) else aux xs (acc + 1) in
    aux cs 0

  let of-length l =
    % -- the following are mostly copied from `ZL0.string-of-length` in `zrbase/zl0`
    let xs = show-float (l /' 1pt) in
    let pu = string-length xs - 1 in
    if string-same (string-sub xs pu 1) `.` then
      string-sub xs 0 pu ^ `pt`
    else xs ^ `pt`
    % -- end

  let ord =
    Ord.make (fun sl sr -> (
      let lstl = string-explode sl in
      let lstr = string-explode sr in
      let-rec sub lstl lstr =
          match (lstl, lstr) with
          | ([],[]) -> Eq
          | (_, []) -> Gt
          | ([],_) -> Lt
          | (nl::xl,nr::xr) -> (
              if nl < nr then
                  Lt
              else
                  if nl > nr then
                      Gt
                  else
                      sub xl xr
          )
      in
      sub lstl lstr
    ))
  let max = Ord.max ord
  let min = Ord.min ord
  let (<) = Ord.lt ord
  let (>) = Ord.gt ord
  let (>=) = Ord.ge ord
  let (<=) = Ord.le ord
  let (==) = Ord.eq ord



  % let byte-length = string-byte-length
  % let sub-bytes i j s = string-sub-bytes s i j
end
