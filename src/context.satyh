use open Util
use Font
use Inline

module Context :> sig
  val make : length -> context

  val set-math-variant-char : int -> (math-char-class -> int) -> context -> context
  val set-math-command : inline [math-text] -> context -> context
  val get-initial-context : length -> inline [math-text] -> context
  val set-hyphen-min : int -> int -> context -> context
  val get-min-gap-of-lines : context -> length
  val set-min-gap-of-lines : length -> context -> context
  val set-space-ratio : float -> float -> float -> context -> context
  val set-space-ratio-between-scripts : float -> float -> float -> script -> script -> context -> context
  val get-space-ratio-between-scripts : context -> script -> script -> option (float * float * float)
  val set-paragraph-margin : length -> length -> context -> context
  val set-min-paragraph-ascender-and-descender : length -> length -> context -> context
  val set-font-size : length -> context -> context
  val get-font-size : context -> length
  val set-font : script -> font -> context -> context
  val get-font : script -> context -> font
  val set-math-font : string -> context -> context
  val set-dominant-wide-script : script -> context -> context
  val get-dominant-wide-script : context -> script
  val set-dominant-narrow-script : script -> context -> context
  val get-dominant-narrow-script : context -> script
  val set-language : script -> language -> context -> context
  val get-language : script -> context -> language
  val set-text-color : color -> context -> context
  val get-text-color : context -> color
  val get-leading : context -> length
  val set-leading : length -> context -> context
  val get-text-width : context -> length
  val set-manual-rising : length -> context -> context
  val set-hyphen-penalty : int -> context -> context
  val get-axis-height : context -> length
  val set-word-break-penalty : int -> context -> context
  val set-every-word-break : inline-boxes -> inline-boxes -> context -> context
  val get-every-word-break : context -> inline-boxes * inline-boxes
end = struct
  val set-math-variant-char = set-math-variant-char
  val set-math-command = set-math-command
  val get-initial-context = get-initial-context
  val set-hyphen-min = set-hyphen-min
  val set-min-gap-of-lines = set-min-gap-of-lines
  val set-space-ratio = set-space-ratio
  val set-space-ratio-between-scripts = set-space-ratio-between-scripts
  val get-space-ratio-between-scripts = get-space-ratio-between-scripts
  val set-paragraph-margin = set-paragraph-margin
  val set-min-paragraph-ascender-and-descender = set-min-paragraph-ascender-and-descender
  val set-font-size = set-font-size
  val get-font-size = get-font-size
  val set-font = set-font
  val get-font = get-font
  val set-math-font = set-math-font
  val set-dominant-wide-script = set-dominant-wide-script
  val get-dominant-wide-script = get-dominant-wide-script
  val set-dominant-narrow-script = set-dominant-narrow-script
  val get-dominant-narrow-script = get-dominant-narrow-script
  val set-language = set-language
  val get-language = get-language
  val set-text-color = set-text-color
  val get-text-color = get-text-color
  val set-leading = set-leading
  val get-text-width = get-text-width
  val set-manual-rising = set-manual-rising
  val set-hyphen-penalty = set-hyphen-penalty

  val get-axis-height ctx =
    get-font-size ctx *' get-math-axis-height-ratio ctx

  val set-word-break-penalty = set-word-break-penalty
  val set-every-word-break = set-every-word-break
  val get-every-word-break = get-every-word-break

  val get-leading ctx =
      let s = `aa` in
      % NOTE: font size should be small enough to get correct value
      let ctx = ctx |> set-font-size 5pt |> set-min-gap-of-lines 0pt in
      let ib = read-inline ctx (embed-string s) in
      let ib = ib ++ (discretionary 0 inline-nil inline-nil inline-nil) ++ ib in
      let (w, h, d) = get-natural-metrics ib in
      let wid = w *' 0.5 in
      let ib1 = embed-block-top ctx wid (fun ctx -> line-break false false ctx ib) in
      let (_, h1, d1) = get-natural-metrics ib1 in
      let () = display-message (show-float ((h1 +' d1 -' h -' d) /' 1pt)) in
      h1 +' d1 -' h -' d

  val get-min-gap-of-lines ctx =
      let s = `aa` in
      let ctx = ctx |> set-leading 0pt in
      let ib = read-inline ctx (embed-string s) in
      let ib = ib ++ (discretionary 0 inline-nil inline-nil inline-nil) ++ ib in
      let (w, h, d) = get-natural-metrics ib in
      let wid = w *' 0.5 in
      let ib1 = embed-block-top ctx wid (fun ctx -> line-break false false ctx ib) in
      let (_, h1, d1) = get-natural-metrics ib1 in
      h1 +' d1 -' (h +' d) *' 2.0

  val inline ctx \math m =
    Inline.of-math (read-math ctx m) ctx

  val make text-width = get-initial-context text-width (command \math)
end
