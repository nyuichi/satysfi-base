@stage: persistent
@require: option
@import: fn
@import: eq
@import: result

module Option : sig
  val eq : ('a Eq.t) implicit -> (('a option) Eq.t) implicit

  val none : 'a option
  val some : 'a -> 'a option
  val is-none : 'a option -> bool
  val is-some : 'a option -> bool
  val unwrap : 'a option -> 'a
  val unwrap-or : 'a -> 'a option -> 'a
  val unwrap-or-else : (unit -> 'a) -> 'a option -> 'a
  val unwrap-none : 'a option -> unit
  val expect : string -> 'a option -> 'a
  val expect-none : string -> 'a option -> unit
  val map : ('a -> 'b) -> 'a option -> 'b option
  val map-or : 'b -> ('a -> 'b) -> 'a option -> 'b
  val map-or-else : (unit -> 'b) -> ('a -> 'b) -> 'a option -> 'b
  val and- : 'a option -> 'a option -> 'a option
  val and-then : ('a -> 'b option) -> 'a option -> 'b option
  val or : 'a option -> 'a option -> 'a option
  val or-else : (unit -> 'a option) -> 'a option -> 'a option
  val xor : 'a option -> 'a option -> 'a option
  val ok-or : 'e -> 'a option -> 'a 'e result
  val ok-or-else : (unit -> 'e) -> 'a option -> 'a 'e result
  val err-or : 'a -> 'e option -> 'a 'e result
  val err-or-else : (unit -> 'a) -> 'e option -> 'a 'e result
  val transpose : ('a 'e result) option -> ('a option) 'e result
  val flatten : ('a option) option -> 'a option
  val ret : 'a -> 'a option
  val fold-list : 'a list -> ('a -> 'b -> 'b option) -> 'b -> 'b option
  val to-list : 'a option -> 'a list
  val iter : ('a -> unit) -> 'a option -> unit

  % deprecated
  val (^&&) : bool option -> bool option -> bool option
  val (^||) : bool option -> bool option -> bool option
  val (^::) : 'a option -> ('a list) option -> ('a list) option
  val (^+) : int option -> int option -> int option
  val (^-) : int option -> int option -> int option
  val (^*) : int option -> int option -> int option
  val (^/) : int option -> int option -> int option
  val (^+.) : float option -> float option -> float option
  val (^-.) : float option -> float option -> float option
  val (^*.) : float option -> float option -> float option
  val (^/.) : float option -> float option -> float option
  val (^+') : length option -> length option -> length option
  val (^-') : length option -> length option -> length option
  val (^*') : length option -> float option -> length option
  val (^/') : length option -> length option -> float option
  val from : 'a -> 'a option -> 'a
  val value : 'a -> 'a option -> 'a
  val bind : 'a option -> ('a -> 'b option) -> 'b option  % TODO: swap arguments
  val join : ('a option) option -> 'a option
end = struct
  let none = None
  let some x = Some x

  let-rec is-none
  | (None) = true
  | (Some(_)) = false

  let-rec is-some
  | (None) = false
  | (Some(_)) = true

  let-rec unwrap-or
  | a (None)    = a
  | _ (Some(a)) = a

  let-rec unwrap-or-else
  | f (None)    = f ()
  | _ (Some(a)) = a

  let expect msg opt =
    opt |> unwrap-or-else (fun () -> panic msg)

  let unwrap opt = opt |> expect `unwrap error`

  let-rec expect-none
  | _   (None)    = ()
  | msg (Some(_)) = panic msg

  let unwrap-none opt = opt |> expect-none `unwrap error`

  let-rec map
  | f (None)    = None
  | f (Some(v)) = Some(f v)

  let-rec map-or b f opt = opt |> map f |> unwrap-or b
  let-rec map-or-else g f opt = opt |> map f |> unwrap-or-else g

  let ok-or e opt = opt |> map Result.ok |> unwrap-or (Result.err e)
  let ok-or-else f opt = opt |> map Result.ok |> unwrap-or-else (fun () -> Result.err (f ()))
  let err-or a opt = opt |> map Result.err |> unwrap-or (Result.ok a)
  let err-or-else f opt = opt |> map Result.err |> unwrap-or-else (fun () -> Result.ok (f ()))

  let-rec and-
  | _   (None) = none
  | opt _      = opt

  let-rec and-then
  | f (None)    = None
  | f (Some(v)) = f v

  let-rec or
  | opt (None) = opt
  | _   opt    = opt

  let-rec or-else
  | f (None) = f ()
  | _ opt    = opt

  let-rec xor
  | (Some(_) as opt) (None)           = opt
  | (None)           (Some(_) as opt) = opt
  | _                _                = none

  let-rec transpose
  | (None) = Result.ok none
  | (Some(r)) = r |> Result.map some

  let flatten opt = opt |> and-then Fn.id
  let ret x = some x

  let to-list opt =
    match opt with
    | None -> []
    | Some(x) -> [x]

  let-rec fold-list list f init =
    match list with
    | [] -> init |> ret
    | (x::xs) -> init |> f x |> and-then (fold-list xs f)

  let-rec iter
  | f (None) = ()
  | f (Some(v)) = f v

  let bind m f = and-then f m
  let join m = flatten m

  let eq eq =
    Eq.make (fun o1 o2 -> (
      match (o1, o2) with
      | (None, None) -> true
      | (Some a, Some b) -> Eq.equal eq a b
      | _ -> false
    ))

  let (^&&) b-opt1 b-opt2 =
    match (b-opt1, b-opt2) with
    | (Some(b1), Some(b2)) -> Some(b1 && b2)
    | (_, _)               -> None

  let (^||) b-opt1 b-opt2 =
    match (b-opt1, b-opt2) with
    | (Some(b1), Some(b2)) -> Some(b1 || b2)
    | (_, _)               -> None

  let (^::) a-opt1 lst-opt2 =
    match (a-opt1, lst-opt2) with
    | (Some(x), Some(xs)) -> Some(x :: xs)
    | (_, _)              -> None

  let (^+) i-opt1 i-opt2 =
    match (i-opt1, i-opt2) with
    | (Some(i1), Some(i2)) -> Some(i1 + i2)
    | (_, _)               -> None

  let (^-) i-opt1 i-opt2 =
    match (i-opt1, i-opt2) with
    | (Some(i1), Some(i2)) -> Some(i1 - i2)
    | (_, _)               -> None

  let (^*) i-opt1 i-opt2 =
    match (i-opt1, i-opt2) with
    | (Some(i1), Some(i2)) -> Some(i1 * i2)
    | (_, _)               -> None

  let (^/) i-opt1 i-opt2 =
    match (i-opt1, i-opt2) with
    | (Some(i1), Some(i2)) -> Some(i1 / i2)
    | (_, _)               -> None

  let (^+.) f-opt1 f-opt2 =
    match (f-opt1, f-opt2) with
    | (Some(f1), Some(f2)) -> Some(f1 +. f2)
    | (_, _)               -> None

  let (^-.) f-opt1 f-opt2 =
    match (f-opt1, f-opt2) with
    | (Some(f1), Some(f2)) -> Some(f1 -. f2)
    | (_, _)               -> None

  let (^*.) f-opt1 f-opt2 =
    match (f-opt1, f-opt2) with
    | (Some(f1), Some(f2)) -> Some(f1 *. f2)
    | (_, _)               -> None

  let (^/.) f-opt1 f-opt2 =
    match (f-opt1, f-opt2) with
    | (Some(f1), Some(f2)) -> Some(f1 /. f2)
    | (_, _)               -> None

  let (^+') l-opt1 l-opt2 =
    match (l-opt1, l-opt2) with
    | (Some(l1), Some(l2)) -> Some(l1 +' l2)
    | (_, _)               -> None

  let (^-') l-opt1 l-opt2 =
    match (l-opt1, l-opt2) with
    | (Some(l1), Some(l2)) -> Some(l1 -' l2)
    | (_, _)               -> None

  let (^*') l-opt1 f-opt2 =
    match (l-opt1, f-opt2) with
    | (Some(l1), Some(f2)) -> Some(l1 *' f2)
    | (_, _)               -> None

  let (^/') l-opt1 l-opt2 =
    match (l-opt1, l-opt2) with
    | (Some(l1), Some(l2)) -> Some(l1 /' l2)
    | (_, _)               -> None

  let from = unwrap-or
  let value = unwrap-or
end
