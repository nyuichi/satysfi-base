@import: base
@import: eq

module Char : sig
  %% Type representing a single unicode codepoint.
  type t

  val equal : t -> t -> bool
  val eq : (t Eq.t) implicit
  val of-codepoint : int -> t
  val newline : t
  val tab : t
  val space : t
  val return : t
  val to-string : t -> string
  val at : int -> string -> t
  val make : string -> t % e.g. Char.make `a`
  val mem : string -> t -> bool
  val is-digit : t -> bool
  val is-alpha : t -> bool
  val is-alnum : t -> bool
  val is-hex-digit : t -> bool
  val is-space : t -> bool
end = struct
  type t = string
  let equal = string-same
  let eq = Eq.make equal
  let of-codepoint c = string-unexplode [c]
  let newline = of-codepoint 10
  let tab = of-codepoint 9
  let space = of-codepoint 32
  let return = of-codepoint 13
  let to-string c = c
  let at i s = string-sub s i 1
  let make s = if string-length s == 1 then at 0 s else panic `Char.make: invalid argument`
  let mem s =
    let len = string-length s in
    let-rec loop i c = ~(&(i < len) &&& (&(equal c (string-sub s i 1)) ||| &(loop (i + 1) c))) in
    (fun c -> loop 0 c)
  let char-pred re = string-match (regexp-of-string re)
  let is-digit = char-pred `[0-9]`
  let is-alpha = char-pred `[A-Za-z]`
  let is-alnum = char-pred `[0-9A-Za-z]`
  let is-hex-digit = char-pred `[0-9A-Fa-f]`
  let is-space = char-pred (`[` ^ string-unexplode [9;10;11;12;13;32] ^ `]`)  % see https://stackoverflow.com/questions/39813584/how-to-split-on-whitespaces-in-ocaml
end