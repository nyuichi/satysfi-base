use open Util
use Eq
use Ord

module Char :> sig
  %% Type representing a single unicode codepoint.
  type t :: o

  val persistent ~equal : t -> t -> bool
  val persistent ~eq : implicit (Eq.t t)
  val persistent ~of-codepoint : int -> t
  val persistent ~to-codepoint : t -> int
  val persistent ~newline : t
  val persistent ~tab : t
  val persistent ~space : t
  val persistent ~return : t
  val persistent ~to-string : t -> string
  val persistent ~at : int -> string -> t
  val persistent ~make : string -> t % e.g. Char.make `a`
  val persistent ~mem : string -> t -> bool
  val persistent ~is-digit : t -> bool
  val persistent ~is-alpha : t -> bool
  val persistent ~is-alnum : t -> bool
  val persistent ~is-hex-digit : t -> bool
  val persistent ~is-space : t -> bool
end = struct
  type t = string
  val persistent ~equal = string-same
  val persistent ~eq = Eq.make equal
  val persistent ~of-codepoint c = string-unexplode [c]
  val persistent ~newline = of-codepoint 10
  val persistent ~tab = of-codepoint 9
  val persistent ~space = of-codepoint 32
  val persistent ~return = of-codepoint 13
  val persistent ~to-string c = c
  val persistent ~at i s = string-sub s i 1
  val persistent ~make s = if string-length s == 1 then at 0 s else panic `Char.make: invalid argument`
  val persistent ~mem s =
    let len = string-length s in
    let rec loop i c = (i < len) &&&- (fun () -> (equal c (string-sub s i 1)) |||- (fun () -> loop (i + 1) c)) in
    (fun c -> loop 0 c)
  val persistent ~char-pred re = string-match (regexp-of-string re)
  val persistent ~is-digit = char-pred `[0-9]`
  val persistent ~is-alpha = char-pred `[A-Za-z]`
  val persistent ~is-alnum = char-pred `[0-9A-Za-z]`
  val persistent ~is-hex-digit = char-pred `[0-9A-Fa-f]`
  val persistent ~is-space = char-pred (`[` ^ string-unexplode [9,10,11,12,13,32] ^ `]`)  % see https://stackoverflow.com/questions/39813584/how-to-split-on-whitespaces-in-ocaml


  val persistent ~to-codepoint c =
    match string-explode c with
    | i::_ -> i
    | _ -> panic `Char.to-codepoint: invalid argument`
    end

end