@stage: persistent

module Unit : sig
  val make : unit
end = struct
  let make = ()
end

module Pair : sig
  val make : 'a -> 'b -> ('a * 'b)
  val fst : ('a * 'b) -> 'a
  val snd : ('a * 'b) -> 'b
  val swap : ('a * 'b) -> ('b * 'a)
end = struct
  let make x y = (x, y)
  let fst (x, _) = x
  let snd (_, y) = y
  let swap (x, y) = (y, x)
end