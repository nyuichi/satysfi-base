module Tuple = struct
  module Unit :> sig
    val persistent ~make : unit
  end = struct
    val persistent ~make = ()
  end

  module Pair :> sig
    val persistent ~make 'a 'b : 'a -> 'b -> ('a * 'b)
    val persistent ~fst 'a 'b : ('a * 'b) -> 'a
    val persistent ~snd 'a 'b : ('a * 'b) -> 'b
    val persistent ~swap 'a 'b : ('a * 'b) -> ('b * 'a)
  end = struct
    val persistent ~make x y = (x, y)
    val persistent ~fst (x, _) = x
    val persistent ~snd (_, y) = y
    val persistent ~swap (x, y) = (y, x)
  end
end
