@require: list
@require: vdecoset

module Itemize2 : sig

  val itemize2 : (context -> int list -> int -> inline-boxes) -> (int -> int -> length) -> int list -> int -> context -> itemize -> block-boxes

end = struct


  let-rec itemize2 f f-item-indent index-lst depth ctx itemize =
    let index =
      match index-lst with
      | [] -> 0
      | x :: xs -> x
    in
    let item-indent = f-item-indent index depth in
    let deco = VDecoSet.empty in
    let make-bb ctx it index-lst depth =
      let num-ib =
        f ctx index-lst depth
      in
      let num-ib-w =
        get-natural-width num-ib
      in
      let inline-space =
        num-ib-w *' (float (-1)) |> inline-skip
      in
      let main-ib = read-inline ctx it in
        line-break true true ctx (inline-space ++ num-ib ++ main-ib ++ inline-fil)
    in
    let parent-indent = item-indent *' (float depth) in
    let main-bb =
      match itemize with
      | Item(it, [])  -> (
          let bullet-width = get-natural-width (f ctx index-lst depth) in
          let pads =
            (parent-indent +' bullet-width, 0pt, 0pt, 0pt)
          in
          block-frame-breakable ctx pads deco (fun ctx -> make-bb ctx it index-lst depth)
        )
      | Item(it, lst) -> (
          let bullet-width = get-natural-width (f ctx index-lst depth) in
          let pads =
            (parent-indent +' bullet-width, 0pt, 0pt, 0pt)
          in
          let index-bb =
            block-frame-breakable ctx pads deco (fun ctx -> make-bb ctx it index-lst depth)
          in
          let bb-lst =
            List.mapi (fun i -> itemize2 f f-item-indent ((i + 1) :: index-lst) (depth + 1) ctx) lst
          in
            index-bb +++ (List.fold-left (+++) block-nil bb-lst)
        )
    in
      main-bb

end


module ListingDesignFun :sig

  val noraml-listing : context -> int list -> int -> inline-boxes
  val noraml-enumerate : context -> int list -> int -> inline-boxes

end = struct

  let noraml-listing ctx index-lst depth = inline-nil

  let noraml-enumerate ctx index-lst depth =
    let num =
      match index-lst with
      | [] -> 0
      | x :: xs -> x
    in
    let str-num = arabic num in
    let it-num = `(` ^ str-num ^ `)` |> embed-string in
    let ib-num = read-inline ctx {#it-num;\ } in
      ib-num

end

