use Path

module VDecoSet :> sig
  val simple-frame : length -> color -> color -> deco-set
end = struct

  % copied from `vdecoset.satyh`
  val simple-frame t scolor fcolor =
    let strokef = stroke t scolor in
    let gr-back x y w d h =
      fill fcolor (Path.rectangle (x, y -' d) (x +' w, y +' h))
    in
    let decoS (x, y) w h d =
      unite-graphics [
        gr-back x y w d h,
        strokef (Path.rectangle (x, y -' d) (x +' w, y +' h)),
      ]
    in
    let decoH (x, y) w h d =
      unite-graphics [
        gr-back x y w d h,
        strokef (Path.poly-line (x, y -' d) [(x, y +' h), (x +' w, y +' h), (x +' w, y -' d),])
      ]
    in
    let decoM (x, y) w h d =
      unite-graphics [
        gr-back x y w d h,
        strokef (Path.line (x, y -' d) (x, y +' h)),
        strokef (Path.line (x +' w, y -' d) (x +' w, y +' h)),
      ]
    in
    let decoT (x, y) w h d =
      unite-graphics [
        gr-back x y w d h,
        strokef (Path.poly-line (x, y +' h) [(x, y -' d), (x +' w, y -' d), (x +' w, y +' h)])
      ]
    in
    (decoS, decoH, decoM, decoT)

end
