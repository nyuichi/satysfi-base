use List
use Inline
use Graphics
% @require: table

module TypesetTabular :> sig
  type cell :: o
  val \tabular2 : inline [list (list cell)]
  val c : inline-text -> cell
  val l : inline-text -> cell
  val r : inline-text -> cell
end = struct

  type cell-align-spec = C | L | R

  val c it = (C, it)
  val l it = (L, it)
  val r it = (R, it)

  type cell = cell-align-spec * inline-text

  val inline ctx \tabular2 dat =
    let f t = dat |> List.map (List.map (fun x -> (
      match x with
      | (C, it) -> t#c it
      | (L, it) -> t#l it
      | (R, it) -> t#r it
      end)))
    in
    ctx |> Inline.read {\tabular(f)(fun xs ys -> (
      let thin = Graphics.stroke 0.5pt Color.black in
      let (y0 :: ys, ylast :: _) = (ys, List.reverse ys) in
      let (_ :: ys) = List.reverse ys in
      let (x0 :: xs, xlast :: _) = (xs, List.reverse xs) in
      let (_ :: xs) = List.reverse xs in
      let gsYs = ys |> List.map (fun y -> thin (Gr.line (x0, y) (xlast, y))) in
      let gsXs = xs |> List.map (fun x -> thin (Gr.line (x, y0) (x, ylast))) in
      List.append gsXs gsYs
    ));}

end
