use DeriveLine

module DeriveAst :> sig

    type t :: o

    val make : option inline-text -> option inline-text -> math-text -> list t -> option DeriveLine.t -> t

    val get-main-label : t -> option inline-text
    val get-sub-label : t -> option inline-text
    val get-conclusion : t -> math-boxes
    val get-assumptions : t -> list t
    val get-line : t -> option DeriveLine.t

    val set-main-label : inline-text -> t -> t
    val set-sub-label : inline-text -> t -> t
    val set-assumptions : list t -> t -> t
    val set-line : DeriveLine.t -> t -> t

end = struct

    % cf. https://github.com/nyuichi/satysfi-base/pull/19#discussion_r361930019
    type t =
    | Ast of option inline-text
        * option inline-text
        * math-text
        * list u
        * option DeriveLine.t

    val make mlabel slabel conclusion assumptions line =
        Ast(mlabel, slabel, conclusion, assumptions, line)


    val get-main-label ast = match ast with
    | Ast(mlabel, _, _, _, _) -> mlabel
    end

    val get-sub-label ast = match ast with
    | Ast(_, slabel, _, _, _) -> slabel
    end

    val get-conclusion ast = match ast with
    | Ast(_, _, conclusion, _, _) -> conclusion
    end

    val get-assumptions ast = match ast with
    | Ast(_, _, _, assumptions, _) -> assumptions
    end

    val get-line ast = match ast with
    | Ast(_, _, _, _, line) -> line
    end


    val set-main-label mlabel ast = match ast with
    | Ast(_, slabel, conclusion, assumptions, line) ->
        Ast(Option.some(mlabel), slabel, conclusion, assumptions, line)
    end

    val set-sub-label slabel ast = match ast with
    | Ast(mlabel, _, conclusion, assumptions, line) ->
        Ast(mlabel, Option.some(slabel), conclusion, assumptions, line)
    end

    val set-assumptions assumptions ast = match ast with
    | Ast(mlabel, slabel, conclusion, _, line) ->
        Ast(mlabel, slabel, conclusion, assumptions, line)
    end

    val set-line line ast = match ast with
    | Ast(mlabel, slabel, conclusion, assumptions, _) ->
        Ast(mlabel, slabel, conclusion, assumptions, Option.some(line))
    end

end
