% use package open Stdlib
use Util

module Fn :> sig
  %% The identity function. [id x] returns [x].
  val persistent ~id 'a : 'a -> 'a

  %% Function composition. [compose f g x] is equivalent to [f (g x)].
  val persistent ~compose 'a 'b 'c : ('b -> 'c) -> ('a -> 'b) -> ('a -> 'c)

  %% [apply f x] is equivalent to [f x].
  val persistent ~apply 'a 'b : ('a -> 'b) -> 'a -> 'b

  %% [flip f x y] is equivalent to [f y x].
  val persistent ~flip 'a 'b 'c : ('a -> 'b -> 'c) -> ('b -> 'a -> 'c)

  %% [const x y] returns [x].
  val persistent ~const 'a 'b : 'a -> 'b -> 'a

  %% [ignore x] returns the unit value ignoring the argument.
  val persistent ~ignore 'a : 'a -> unit

  %% [non pred] returns a predicate function whose result is negated.
  val persistent ~non 'a : ('a -> bool) -> ('a -> bool)

  %% [tap f x] evaluates [f x] and then returns [x].
  %%
  %% e.g. [v |> tap (fun x -> Debug.log x)]
  val persistent ~tap 'a 'b : ('a -> 'b) -> 'a -> 'a

  %% [on f g] converts binary function [g] by prepending function [f].
  %%
  %% e.g. [String.equal |> on Tuple.fst]
  val persistent ~on 'a 'b 'c : ('a -> 'b) -> ('b -> 'b -> 'c) -> ('a -> 'a -> 'c)

  %% [fix f] returns the fixed point of [f].
  %%
  %% e.g. [
  %% 0 |> fix (fun loop n ->
  %%   if n > 10 then
  %%     Debug.log `finish`
  %%   else
  %%     Debug.log (String.of-int n) before
  %%     loop (n + 1)
  %% )
  %% ]
  val persistent ~fix 'a 'b : (('a -> 'b) -> 'a -> 'b) -> 'a -> 'b

  %% [as-type-of x y] returns [y]. This should be used to help
  %% the type checker to infer the type of [x].
  %%
  %% e.g. [str |> as-type-of ` `]
  val persistent ~as-type-of 'a : 'a -> 'a -> 'a
end = struct
  val persistent ~id x = x
  val persistent ~compose f g x = f (g x)
  val persistent ~apply f x = f x
  val persistent ~flip f y x = f x y
  val persistent ~const x _ = x
  val persistent ~ignore _ = ()
  val persistent ~non f a = not (f a)
  val persistent ~tap f x = ignore (f x) before x
  val persistent ~on f g a1 a2 = g (f a1) (f a2)
  val persistent ~rec fix f x = f (fix f) x
  val persistent ~as-type-of x y = y
end