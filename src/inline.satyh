% module for inline-boxes
use List
%use package open Stdlib
use Fn
use Util

module Inline :> sig
  type baseline-spec = Top | Bottom
  val read : inline-text -> context -> inline-boxes
  val of-string : string -> context -> inline-boxes
  val of-math : math-text -> context -> inline-boxes
  val of-image : length -> image -> inline-boxes
  val of-graphics : length -> length -> length -> (point -> list graphics) -> inline-boxes
  val of-block : ?(baseline : baseline-spec) length -> (context -> block-boxes) -> context -> inline-boxes
  val of-block-breakable : block-boxes -> context -> inline-boxes

  % padding spaces
  val skip : length -> inline-boxes
  val glue : length -> length -> length -> inline-boxes
  val fil : inline-boxes
  val raise : length -> inline-boxes -> inline-boxes

  val nil : inline-boxes
  val append : inline-boxes -> inline-boxes -> inline-boxes
  val concat : inline-boxes list -> inline-boxes

  % concatenate inline-boxes in a block-box direction
  % val stack : baseline-spec ?-> inline-boxes list -> inline-boxes

  val natural-metrics : inline-boxes -> length * length * length
  val natural-width : inline-boxes -> length
  val natural-height : inline-boxes -> length
  val natural-depth : inline-boxes -> length

  val to-string : inline-boxes -> string

  % val discretionary : int -> inline-boxes -> inline-boxes -> inline-boxes -> inline-boxes
  % val script-guard : script -> inline-boxes -> inline-boxes
  % val script-guard-both : script -> script -> inline-boxes -> inline-boxes

  val no-break : inline-boxes -> inline-boxes
  val mandatory-break : context -> inline-boxes
end = struct
  type baseline-spec = Top | Bottom
  val read = Fn.flip read-inline
  val of-string s ctx = read (embed-string s) ctx
  val of-math m ctx = embed-math ctx m
  val of-image = Fn.flip use-image-by-width
  val of-graphics = inline-graphics

  val of-block ?(baseline = bl-opt) len bbf ctx =
    let f =
      match bl-opt with
      | Some(Top) -> embed-block-top
      | _ -> embed-block-bottom
      end
    in f ctx len bbf

  val of-block-breakable = Fn.flip embed-block-breakable

  val skip = inline-skip
  val glue = inline-glue
  val fil = inline-fil
  val raise = raise-inline

  val nil = inline-nil
  val append ib1 ib2 = ib1 ++ ib2
  val concat ibs = List.fold-right append nil ibs

  val stack ?(baseline = bl-opt) ibs =
    let f =
      match bl-opt with
      | Some(Top) -> line-stack-top
      | _ -> line-stack-bottom
      end
    in f ibs

  val natural-metrics = get-natural-metrics
  val natural-width ib = let (w, _, _) = natural-metrics ib in w
  val natural-height ib = let (_, h, _) = natural-metrics ib in h
  val natural-depth ib = let (_, _, d) = natural-metrics ib in d

  val to-string = extract-string

  % let discretionary = discretionary
  % let script-guard = script-guard
  % add-footnote : block-boxes -> inline-boxes
  % get-initial-context : length -> command -> context
  % set-hyphen-min
  % ...
  % inline-frame-hogehoge
  % inline-graphics-outer

  val no-break ib = inline-frame-outer (0pt, 0pt, 0pt, 0pt) (fun _ _ _ _ -> []) ib
  val mandatory-break ctx = discretionary 0 (skip (get-text-width ctx *' 2.)) fil nil
end
