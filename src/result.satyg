@stage: persistent
@import: fn

module Result : sig
  val ok : 'a -> 'a 'e result
  val err : 'e -> 'a 'e result
  val is-ok : 'a 'e result -> bool
  val is-err : 'a 'e result -> bool
  val to-ok : 'a 'e result -> 'a option
  val to-err : 'a 'e result -> 'e option
  val unwrap : 'a 'e result -> 'a
  val unwrap-or : 'a -> 'a 'e result -> 'a
  val unwrap-or-else : ('e -> 'a) -> 'a 'e result -> 'a
  val unwrap-err : 'a 'e result -> 'e
  val expect : string -> 'a 'e result -> 'a
  val expect-err : string -> 'a 'e result -> 'e
  val map : ('a -> 'b) -> 'a 'e result -> 'b 'e result
  val map-or : 'b -> ('a -> 'b) -> 'a 'e result -> 'b
  val map-or-else : ('e -> 'b) -> ('a -> 'b) -> 'a 'e result -> 'b
  val map-err : ('e -> 'f) -> 'a 'e result -> 'a 'f result
  val and- : 'a 'e result -> 'a 'e result -> 'a 'e result
  val and-then : ('a -> 'b 'e result) -> 'a 'e result -> 'b 'e result
  val or : 'a 'e result -> 'a 'e result -> 'a 'e result
  val or-else : ('e -> 'a 'f result) -> 'a 'e result -> 'a 'f result
  val transpose : ('a option) 'e result -> ('a 'e result) option
  val flatten : ('a 'e result) 'e result -> 'a 'e result
  val ret : 'a -> 'a 'e result
  val fold-list : 'a list -> ('a -> 'b -> 'b 'e result) -> 'b -> 'b 'e result

  % deprecated
  val bind : ('a -> 'b 'e result) -> 'a 'e result -> 'b 'e result
  val join : ('a 'e result) 'e result -> 'a 'e result
  val to-option : 'a 'e result -> 'a option
end = struct
  let ok x = Ok x
  let err e = Err e

  let is-ok r =
    match r with
    | Ok(_) -> true
    | _ -> false

  let is-err r =
    match r with
    | Ok(_) -> false
    | _ -> true

  let to-ok r =
    match r with
    | Ok(a) -> Some(a)
    | _ -> None

  let to-err r =
    match r with
    | Err(e) -> Some(e)
    | _ -> None

  let unwrap-or-else f r =
    match r with
    | Ok(a) -> a
    | Err(e) -> f e

  let expect msg r =
    r |> unwrap-or-else (fun _ -> panic msg)

  let expect-err msg r =
    match r with
    | Ok(a) -> panic msg
    | Err(e) -> e

  let unwrap r =
    r |> expect `unwrap error`

  let unwrap-or x r =
    r |> unwrap-or-else (Fn.const x)

  let unwrap-err r =
    r |> expect-err `unwrap error`

  let map f r =
    match r with
    | Ok(a) -> ok (f a)
    | Err(e) -> err e

  let map-or b f r =
    match r with
    | Ok(a) -> f a
    | Err(e) -> b

  let map-or-else g f r =
    match r with
    | Ok(a) -> f a
    | Err(e) -> g e

  let map-err f r =
    match r with
    | Ok(a) -> ok a
    | Err(e) -> err (f e)

  let-rec and-
  | _ (Err(_) as r) = r
  | r _             = r

  let and-then k r =
    match r with
    | Ok(a) -> k a
    | Err(e) -> err e

  let-rec or
  | _ (Ok(_) as r) = r
  | r _            = r

  let-rec or-else
  | _ (Ok(_) as r) = r
  | f (Err(e))     = f e

  let transpose r =
    match r with
    | Ok(Some(x)) -> Some(ok x)
    | Ok(None)    -> None
    | Err(e)      -> Some(err e)

  let ret x = ok x

  let flatten r =
    match r with
    | Ok(r) -> r
    | Err(e) -> err e

  let-rec fold-list list f init =
    match list with
    | [] -> init |> ret
    | (x::xs) -> init |> f x |> and-then (fold-list xs f)

  let bind = and-then
  let join = flatten
  let to-option = to-ok
end